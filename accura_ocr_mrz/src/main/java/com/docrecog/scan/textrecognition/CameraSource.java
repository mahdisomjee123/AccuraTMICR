/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.docrecog.scan.textrecognition;

import android.app.Activity;
import android.graphics.ImageFormat;
import android.hardware.Camera.CameraInfo;

import com.google.android.gms.common.images.Size;

import java.nio.ByteBuffer;
import java.util.IdentityHashMap;
import java.util.Map;

//import com.google.firebase.ml.vision.common.FirebaseVisionImageMetadata;

/**
 * Manages the camera and allows UI updates on top of it (e.g. overlaying extra Graphics). This
 * receives preview frames from the camera at a specified rate, sends those frames to detector as
 * fast as it is able to process.
 *
 * <p>This camera source makes a best effort to manage processing on preview frames as fast as
 * possible, while at the same time minimizing lag. As such, frames may be dropped if the detector
 * is unable to keep up with the rate of frames generated by the camera.
 */
public class CameraSource {
  public static final int CAMERA_FACING_FRONT = CameraInfo.CAMERA_FACING_FRONT;

  public static final int CAMERA_FACING_BACK = CameraInfo.CAMERA_FACING_BACK;

  private static final String TAG = "CameraSource";

  private static final int IMAGE_FORMAT = ImageFormat.NV21;
  private static final int MIN_CAMERA_PREVIEW_WIDTH = 400;
  private static final int MAX_CAMERA_PREVIEW_WIDTH = 1300;
  private static final int DEFAULT_REQUESTED_CAMERA_PREVIEW_WIDTH = 640;
  private static final int DEFAULT_REQUESTED_CAMERA_PREVIEW_HEIGHT = 360;
  private static final float REQUESTED_CAMERA_FPS = 30.0f;


  private Size previewSize;

  /**
   * Dedicated thread and associated runnable for calling into the detector with frames, as the
   * frames become available from the camera.
   */
  private Thread processingThread;

  private final Object processorLock = new Object();
  protected int facing = CAMERA_FACING_BACK;


  public int getCameraFacing() {
    return facing;
  }


  /**
   * Map to convert between a byte array, received from the camera, and its associated byte buffer.
   * We use byte buffers internally because this is a more efficient way to call into native code
   * later (avoids a potential copy).
   *
   * <p><b>Note:</b> uses IdentityHashMap here instead of HashMap because the behavior of an array's
   * equals, hashCode and toString methods is both useless and unexpected. IdentityHashMap enforces
   * identity ('==') check on the keys.
   */
  private final Map<byte[], ByteBuffer> bytesToByteBuffer = new IdentityHashMap<>();

//  private final Context context;
  protected Activity activity;

  private final GraphicOverlay graphicOverlay;

//  public CameraSource(GraphicOverlay graphicOverlay) {
//    this.context = graphicOverlay.getContext();
//    this.graphicOverlay = graphicOverlay;
//  }
  public CameraSource(Activity activity, GraphicOverlay graphicOverlay) {
    this.activity = activity;
    this.graphicOverlay = graphicOverlay;
  }
  public synchronized void setFacing(int facing) {
    if ((facing != CAMERA_FACING_BACK) && (facing != CAMERA_FACING_FRONT)) {
      throw new IllegalArgumentException("Invalid camera: " + facing);
    }
    this.facing = facing;
  }

  /** Returns the preview size that is currently in use by the underlying camera. */
  Size getPreviewSize() {
    return previewSize;
  }

}
